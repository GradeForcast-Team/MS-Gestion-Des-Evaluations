name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:
    inputs: 
        environment:
            description: 'Deployment Environment'
            required: true
            default: 'production'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositories
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Build and Push Docker Image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t elohim237/repoevaluation:latest .
          docker push elohim237/repoevaluation:latest
          tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: Store artefact for distribution
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz
          
  unit-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.16.1

      - name: Run Tests
        run: |
          npm install
          npm test

  deploy:
    name: Deploy to production server
    runs-on: ubuntu-latest
    needs: unit-test  # Corrected job dependency name
    steps:
      - name: Download deployment artefact
        uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Create artifact directory
        run: mkdir -p artifact

      - name: Extract files
        run: tar -xzf ${{ github.sha }}.tar.gz -C .

      - name: Drop zip and tar files
        run: rm ${{ github.sha }}.tar.gz

      - name: Copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST_PROD }}
          username: ${{ secrets.SSH_USER_PROD }}
          password: ${{ secrets.SSH_PASSWORD_PROD }}
          port: 22
          source: .
          target: ${{ secrets.SSH_PATH_PROD }}
          overwrite: true
          debug: true

      - name: SSH into the server and deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_PROD }}
          username: ${{ secrets.SSH_USER_PROD }}
          password: ${{ secrets.SSH_PASSWORD_PROD }}
          port: 22
          script: |
            cd ${{ secrets.SSH_PATH_PROD }}
            docker-compose down
            docker-compose pull backend
            docker-compose up -d
            # Vérifier que le conteneur est en cours d'exécution
            docker ps

